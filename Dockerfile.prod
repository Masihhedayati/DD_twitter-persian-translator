# =============================================================================
# PRODUCTION DOCKERFILE - OPTIMIZED FOR KOYEB DEPLOYMENT
# =============================================================================

# Multi-stage build for minimal image size
FROM python:3.9-slim as builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy production requirements
COPY requirements.prod.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --user -r requirements.prod.txt

# Production stage
FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security (before copying packages)
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Copy Python packages from builder and set proper ownership
COPY --from=builder /root/.local /home/appuser/.local
RUN chown -R appuser:appuser /home/appuser/.local

# Copy application code
COPY app.py .
COPY config.py .
COPY startup_info.py .
COPY core/ ./core/
COPY templates/ ./templates/
COPY static/ ./static/

# Create necessary directories
RUN mkdir -p logs data

# Set ownership of all app files
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PATH=/home/appuser/.local/bin:$PATH
ENV FLASK_ENV=production

# Expose port (Koyeb will set PORT environment variable)
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8000}/health || exit 1

# Run with Gunicorn for production - Use PORT environment variable or default to 8000
CMD ["sh", "-c", "gunicorn --bind 0.0.0.0:${PORT:-8000} --workers 2 --threads 4 --timeout 120 app:app"] 